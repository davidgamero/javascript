/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.22.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    V1APIResourceList,
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1DeleteOptions,
    V1DeleteOptionsFromJSON,
    V1DeleteOptionsToJSON,
    V1Status,
    V1StatusFromJSON,
    V1StatusToJSON,
    V1alpha1CSIStorageCapacity,
    V1alpha1CSIStorageCapacityFromJSON,
    V1alpha1CSIStorageCapacityToJSON,
    V1alpha1CSIStorageCapacityList,
    V1alpha1CSIStorageCapacityListFromJSON,
    V1alpha1CSIStorageCapacityListToJSON,
    V1alpha1VolumeAttachment,
    V1alpha1VolumeAttachmentFromJSON,
    V1alpha1VolumeAttachmentToJSON,
    V1alpha1VolumeAttachmentList,
    V1alpha1VolumeAttachmentListFromJSON,
    V1alpha1VolumeAttachmentListToJSON,
} from '../models';

export interface StorageV1alpha1ApiCreateNamespacedCSIStorageCapacityRequest {
    namespace: string;
    body: V1alpha1CSIStorageCapacity;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface StorageV1alpha1ApiCreateVolumeAttachmentRequest {
    body: V1alpha1VolumeAttachment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface StorageV1alpha1ApiDeleteCollectionNamespacedCSIStorageCapacityRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface StorageV1alpha1ApiDeleteCollectionVolumeAttachmentRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface StorageV1alpha1ApiDeleteNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface StorageV1alpha1ApiDeleteVolumeAttachmentRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface StorageV1alpha1ApiListCSIStorageCapacityForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface StorageV1alpha1ApiListNamespacedCSIStorageCapacityRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface StorageV1alpha1ApiListVolumeAttachmentRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface StorageV1alpha1ApiPatchNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface StorageV1alpha1ApiPatchVolumeAttachmentRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface StorageV1alpha1ApiReadNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface StorageV1alpha1ApiReadVolumeAttachmentRequest {
    name: string;
    pretty?: string;
}

export interface StorageV1alpha1ApiReplaceNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    body: V1alpha1CSIStorageCapacity;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface StorageV1alpha1ApiReplaceVolumeAttachmentRequest {
    name: string;
    body: V1alpha1VolumeAttachment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

/**
 * 
 */
export class StorageV1alpha1Api extends runtime.BaseAPI {

    /**
     * create a CSIStorageCapacity
     */
    async createNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1alpha1ApiCreateNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1CSIStorageCapacity>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createNamespacedCSIStorageCapacity.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNamespacedCSIStorageCapacity.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1CSIStorageCapacityToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1CSIStorageCapacityFromJSON(jsonValue));
    }

    /**
     * create a CSIStorageCapacity
     */
    async createNamespacedCSIStorageCapacity(requestParameters: StorageV1alpha1ApiCreateNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<V1alpha1CSIStorageCapacity> {
        const response = await this.createNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a VolumeAttachment
     */
    async createVolumeAttachmentRaw(requestParameters: StorageV1alpha1ApiCreateVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1VolumeAttachment>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createVolumeAttachment.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/volumeattachments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1VolumeAttachmentToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * create a VolumeAttachment
     */
    async createVolumeAttachment(requestParameters: StorageV1alpha1ApiCreateVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<V1alpha1VolumeAttachment> {
        const response = await this.createVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of CSIStorageCapacity
     */
    async deleteCollectionNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1alpha1ApiDeleteCollectionNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedCSIStorageCapacity.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of CSIStorageCapacity
     */
    async deleteCollectionNamespacedCSIStorageCapacity(requestParameters: StorageV1alpha1ApiDeleteCollectionNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<V1Status> {
        const response = await this.deleteCollectionNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of VolumeAttachment
     */
    async deleteCollectionVolumeAttachmentRaw(requestParameters: StorageV1alpha1ApiDeleteCollectionVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/volumeattachments`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of VolumeAttachment
     */
    async deleteCollectionVolumeAttachment(requestParameters: StorageV1alpha1ApiDeleteCollectionVolumeAttachmentRequest = {}, initOverrides?: RequestInit): Promise<V1Status> {
        const response = await this.deleteCollectionVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a CSIStorageCapacity
     */
    async deleteNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1alpha1ApiDeleteNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNamespacedCSIStorageCapacity.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedCSIStorageCapacity.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a CSIStorageCapacity
     */
    async deleteNamespacedCSIStorageCapacity(requestParameters: StorageV1alpha1ApiDeleteNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<V1Status> {
        const response = await this.deleteNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a VolumeAttachment
     */
    async deleteVolumeAttachmentRaw(requestParameters: StorageV1alpha1ApiDeleteVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1VolumeAttachment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteVolumeAttachment.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * delete a VolumeAttachment
     */
    async deleteVolumeAttachment(requestParameters: StorageV1alpha1ApiDeleteVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<V1alpha1VolumeAttachment> {
        const response = await this.deleteVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(initOverrides?: RequestInit): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    async listCSIStorageCapacityForAllNamespacesRaw(requestParameters: StorageV1alpha1ApiListCSIStorageCapacityForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1CSIStorageCapacityList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/csistoragecapacities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1CSIStorageCapacityListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    async listCSIStorageCapacityForAllNamespaces(requestParameters: StorageV1alpha1ApiListCSIStorageCapacityForAllNamespacesRequest = {}, initOverrides?: RequestInit): Promise<V1alpha1CSIStorageCapacityList> {
        const response = await this.listCSIStorageCapacityForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    async listNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1alpha1ApiListNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1CSIStorageCapacityList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listNamespacedCSIStorageCapacity.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1CSIStorageCapacityListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    async listNamespacedCSIStorageCapacity(requestParameters: StorageV1alpha1ApiListNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<V1alpha1CSIStorageCapacityList> {
        const response = await this.listNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind VolumeAttachment
     */
    async listVolumeAttachmentRaw(requestParameters: StorageV1alpha1ApiListVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1VolumeAttachmentList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/volumeattachments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VolumeAttachmentListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind VolumeAttachment
     */
    async listVolumeAttachment(requestParameters: StorageV1alpha1ApiListVolumeAttachmentRequest = {}, initOverrides?: RequestInit): Promise<V1alpha1VolumeAttachmentList> {
        const response = await this.listVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified CSIStorageCapacity
     */
    async patchNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1alpha1ApiPatchNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1CSIStorageCapacity>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNamespacedCSIStorageCapacity.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedCSIStorageCapacity.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNamespacedCSIStorageCapacity.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1CSIStorageCapacityFromJSON(jsonValue));
    }

    /**
     * partially update the specified CSIStorageCapacity
     */
    async patchNamespacedCSIStorageCapacity(requestParameters: StorageV1alpha1ApiPatchNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<V1alpha1CSIStorageCapacity> {
        const response = await this.patchNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified VolumeAttachment
     */
    async patchVolumeAttachmentRaw(requestParameters: StorageV1alpha1ApiPatchVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1VolumeAttachment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchVolumeAttachment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchVolumeAttachment.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * partially update the specified VolumeAttachment
     */
    async patchVolumeAttachment(requestParameters: StorageV1alpha1ApiPatchVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<V1alpha1VolumeAttachment> {
        const response = await this.patchVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified CSIStorageCapacity
     */
    async readNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1alpha1ApiReadNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1CSIStorageCapacity>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNamespacedCSIStorageCapacity.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readNamespacedCSIStorageCapacity.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1CSIStorageCapacityFromJSON(jsonValue));
    }

    /**
     * read the specified CSIStorageCapacity
     */
    async readNamespacedCSIStorageCapacity(requestParameters: StorageV1alpha1ApiReadNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<V1alpha1CSIStorageCapacity> {
        const response = await this.readNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified VolumeAttachment
     */
    async readVolumeAttachmentRaw(requestParameters: StorageV1alpha1ApiReadVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1VolumeAttachment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readVolumeAttachment.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * read the specified VolumeAttachment
     */
    async readVolumeAttachment(requestParameters: StorageV1alpha1ApiReadVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<V1alpha1VolumeAttachment> {
        const response = await this.readVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified CSIStorageCapacity
     */
    async replaceNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1alpha1ApiReplaceNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1CSIStorageCapacity>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNamespacedCSIStorageCapacity.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedCSIStorageCapacity.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNamespacedCSIStorageCapacity.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1CSIStorageCapacityToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1CSIStorageCapacityFromJSON(jsonValue));
    }

    /**
     * replace the specified CSIStorageCapacity
     */
    async replaceNamespacedCSIStorageCapacity(requestParameters: StorageV1alpha1ApiReplaceNamespacedCSIStorageCapacityRequest, initOverrides?: RequestInit): Promise<V1alpha1CSIStorageCapacity> {
        const response = await this.replaceNamespacedCSIStorageCapacityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified VolumeAttachment
     */
    async replaceVolumeAttachmentRaw(requestParameters: StorageV1alpha1ApiReplaceVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1VolumeAttachment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceVolumeAttachment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceVolumeAttachment.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1VolumeAttachmentToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VolumeAttachmentFromJSON(jsonValue));
    }

    /**
     * replace the specified VolumeAttachment
     */
    async replaceVolumeAttachment(requestParameters: StorageV1alpha1ApiReplaceVolumeAttachmentRequest, initOverrides?: RequestInit): Promise<V1alpha1VolumeAttachment> {
        const response = await this.replaceVolumeAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
